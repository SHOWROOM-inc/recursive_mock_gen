// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/cache_repository.go
//
// Generated by this command:
//
//	mockgen -source repositories/cache_repository.go -destination testing/mocks/repositories/cache_repository.go -package mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	models "github.com/SHOWROOM-inc/recursive_mock_gen/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheRepository is a mock of CacheRepository interface.
type MockCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepositoryMockRecorder
	isgomock struct{}
}

// MockCacheRepositoryMockRecorder is the mock recorder for MockCacheRepository.
type MockCacheRepositoryMockRecorder struct {
	mock *MockCacheRepository
}

// NewMockCacheRepository creates a new mock instance.
func NewMockCacheRepository(ctrl *gomock.Controller) *MockCacheRepository {
	mock := &MockCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepository) EXPECT() *MockCacheRepositoryMockRecorder {
	return m.recorder
}

// ReadCache mocks base method.
func (m *MockCacheRepository) ReadCache(cacheFilePath string) (models.Cache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCache", cacheFilePath)
	ret0, _ := ret[0].(models.Cache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCache indicates an expected call of ReadCache.
func (mr *MockCacheRepositoryMockRecorder) ReadCache(cacheFilePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCache", reflect.TypeOf((*MockCacheRepository)(nil).ReadCache), cacheFilePath)
}

// WriteCache mocks base method.
func (m_2 *MockCacheRepository) WriteCache(cacheFilePath string, m models.Cache) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "WriteCache", cacheFilePath, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCache indicates an expected call of WriteCache.
func (mr *MockCacheRepositoryMockRecorder) WriteCache(cacheFilePath, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCache", reflect.TypeOf((*MockCacheRepository)(nil).WriteCache), cacheFilePath, m)
}
