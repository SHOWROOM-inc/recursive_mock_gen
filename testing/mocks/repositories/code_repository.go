// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/code_repository.go
//
// Generated by this command:
//
//	mockgen -source repositories/code_repository.go -destination testing/mocks/repositories/code_repository.go -package mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	models "github.com/SHOWROOM-inc/recursive_mock_gen/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCodeRepository is a mock of CodeRepository interface.
type MockCodeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCodeRepositoryMockRecorder
	isgomock struct{}
}

// MockCodeRepositoryMockRecorder is the mock recorder for MockCodeRepository.
type MockCodeRepositoryMockRecorder struct {
	mock *MockCodeRepository
}

// NewMockCodeRepository creates a new mock instance.
func NewMockCodeRepository(ctrl *gomock.Controller) *MockCodeRepository {
	mock := &MockCodeRepository{ctrl: ctrl}
	mock.recorder = &MockCodeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeRepository) EXPECT() *MockCodeRepositoryMockRecorder {
	return m.recorder
}

// LoadInterfaces mocks base method.
func (m *MockCodeRepository) LoadInterfaces(rootDir string) (models.Cache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadInterfaces", rootDir)
	ret0, _ := ret[0].(models.Cache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadInterfaces indicates an expected call of LoadInterfaces.
func (mr *MockCodeRepositoryMockRecorder) LoadInterfaces(rootDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadInterfaces", reflect.TypeOf((*MockCodeRepository)(nil).LoadInterfaces), rootDir)
}
